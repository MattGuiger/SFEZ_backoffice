{"version":3,"sources":["webpack:///src/app/form/ngx-wizard/data/formData.model.ts","webpack:///src/app/form/ngx-wizard/data/formData.service.ts","webpack:///src/app/form/ngx-wizard/workflow/workflow.model.ts","webpack:///src/app/form/ngx-wizard/workflow/workflow.service.ts"],"names":["FormData","first_name","last_name","email","password","company_name","country_id","work","street","city","state","zip","Personal","Address","FormDataService","workflowService","formData","isPersonalFormValid","isWorkFormValid","isAddressFormValid","personal","data","validateStep","address","resetSteps","clear","providedIn","STEPS","result","WorkflowService","workflow","step","valid","found","i","length","forEach","element","redirectToStep","item"],"mappings":"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","file":"common-es5.js","sourcesContent":["//Wizard form data class Starts\r\nexport class FormData {\r\n    first_name: string = '';\r\n    last_name : string = '';\r\n    email: string = '';\r\n    password : string ='';\r\n    company_name : string ='';\r\n    country_id :string = '';\r\n    work: string = '';\r\n    street: string = '';\r\n    city: string = '';\r\n    state: string = '';\r\n    zip: string = '';\r\n\r\n    clear() {\r\n        this.first_name = '';\r\n        this.last_name = '';\r\n        this.email = '';\r\n        this.company_name='';\r\n        this.password='';\r\n        this.country_id='';\r\n        this.work = '';\r\n        this.street = '';\r\n        this.city = '';\r\n        this.state = '';\r\n        this.zip = '';\r\n    }\r\n}\r\n//Wizard form data class Ends\r\n\r\n//Personal tab data class starts\r\nexport class Personal {\r\n    first_name: string = '';\r\n    last_name : string = '';\r\n    email: string = '';\r\n    password : string ='';\r\n    company_name : string ='';\r\n    country_id :string = '';\r\n}\r\n//Personal tab data class ends\r\n\r\n//Address tab data class starts\r\nexport class Address {\r\n    street: string = '';\r\n    city: string = '';\r\n    state: string = '';\r\n    zip: string = '';\r\n}\r\n//Address tab data class Ends","import { Injectable } from '@angular/core';\r\n\r\nimport { FormData, Personal, Address } from './formData.model';\r\nimport { WorkflowService } from '../workflow/workflow.service';\r\nimport { STEPS } from '../workflow/workflow.model';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\nexport class FormDataService {\r\n\r\n    private formData: FormData = new FormData();\r\n    private isPersonalFormValid: boolean = false;\r\n    private isWorkFormValid: boolean = false;\r\n    private isAddressFormValid: boolean = false;\r\n\r\n    constructor(private workflowService: WorkflowService) {\r\n    }\r\n    //Get Personal Tab Data\r\n    getPersonal(): Personal {\r\n        // Return the Personal data\r\n        var personal: Personal = {\r\n            first_name: this.formData.first_name,\r\n            last_name: this.formData.last_name,\r\n            email: this.formData.email,\r\n            company_name:this.formData.company_name,\r\n            password : this.formData.password,\r\n            country_id : this.formData.country_id\r\n        };\r\n        return personal;\r\n    }\r\n\r\n    //Set Personal Tab Data\r\n    setPersonal(data: Personal) {\r\n        // Update the Personal data only when the Personal Form had been validated successfully\r\n        this.isPersonalFormValid = true;\r\n        this.formData.first_name = data.first_name;\r\n        this.formData.last_name = data.last_name;\r\n        this.formData.email = data.email;\r\n\r\n        // Validate Personal Step in Workflow\r\n        this.workflowService.validateStep(STEPS.personal);\r\n    }\r\n\r\n    //Get Work Tab Data\r\n    getWork(): string {\r\n        // Return the work type\r\n        return this.formData.work;\r\n    }\r\n\r\n    //Set Work Tab Data\r\n    setWork(data: string) {\r\n        // Update the work type only when the Work Form had been validated successfully\r\n        this.isWorkFormValid = true;\r\n        this.formData.work = data;\r\n        // Validate Work Step in Workflow\r\n        this.workflowService.validateStep(STEPS.work);\r\n    }\r\n\r\n    //Get Address Tab Data\r\n    getAddress(): Address {\r\n        // Return the Address data\r\n        var address: Address = {\r\n            street: this.formData.street,\r\n            city: this.formData.city,\r\n            state: this.formData.state,\r\n            zip: this.formData.zip\r\n        };\r\n        return address;\r\n    }\r\n    \r\n    //Set Address Tab Data\r\n    setAddress(data: Address) {\r\n        // Update the Address data only when the Address Form had been validated successfully\r\n        this.isAddressFormValid = true;\r\n        this.formData.street = data.street;\r\n        this.formData.city = data.city;\r\n        this.formData.state = data.state;\r\n        this.formData.zip = data.zip;\r\n        // Validate Address Step in Workflow\r\n        this.workflowService.validateStep(STEPS.address);\r\n    }\r\n\r\n    getFormData(): FormData {\r\n        // Return the entire Form Data\r\n        return this.formData;\r\n    }\r\n\r\n    resetFormData(): FormData {\r\n        // Reset the workflow\r\n        this.workflowService.resetSteps();\r\n        // Return the form data after all this.* members had been reset\r\n        this.formData.clear();\r\n        this.isPersonalFormValid = this.isWorkFormValid = this.isAddressFormValid = false;\r\n        return this.formData;\r\n    }\r\n\r\n    isFormValid() {\r\n        // Return true if all forms had been validated successfully; otherwise, return false\r\n        return this.isPersonalFormValid &&\r\n            this.isWorkFormValid &&\r\n            this.isAddressFormValid;\r\n    }\r\n}","export const STEPS = {\r\n    personal: 'personal',\r\n    work: 'work',\r\n    address: 'address',\r\n    result: 'result'\r\n}\r\n","import { Injectable }         from '@angular/core';\r\nimport { STEPS }              from './workflow.model';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\nexport class WorkflowService {\r\n    private workflow = [\r\n        { step: STEPS.personal, valid: false },\r\n        { step: STEPS.work, valid: false },\r\n        { step: STEPS.address, valid: false },\r\n        { step: STEPS.result, valid: false }\r\n    ];\r\n    \r\n    validateStep(step: string) {\r\n        // If the state is found, set the valid field to true \r\n        var found = false;\r\n        for (var i = 0; i < this.workflow.length && !found; i++) {\r\n            if (this.workflow[i].step === step) {\r\n                found = this.workflow[i].valid = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    resetSteps() {\r\n        // Reset all the steps in the Workflow to be invalid\r\n        this.workflow.forEach(element => {\r\n            element.valid = false;\r\n        });\r\n    }\r\n\r\n    getFirstInvalidStep(step: string) : string {\r\n        // If all the previous steps are validated, return blank\r\n        // Otherwise, return the first invalid step\r\n        var found = false;\r\n        var valid = true;\r\n        var redirectToStep = '';\r\n        for (var i = 0; i < this.workflow.length && !found && valid; i++) {\r\n            let item = this.workflow[i];\r\n            if (item.step === step) {\r\n                found = true;\r\n                redirectToStep = '';\r\n            }\r\n            else {\r\n                valid = item.valid;\r\n                redirectToStep = item.step\r\n            }\r\n        }\r\n        return redirectToStep;\r\n    }\r\n}"]}