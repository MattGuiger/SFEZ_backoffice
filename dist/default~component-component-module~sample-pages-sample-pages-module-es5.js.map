{"version":3,"sources":["webpack:///node_modules/angular-notifier/__ivy_ngcc__/fesm2015/angular-notifier.js"],"names":["NotifierContainerComponent_li_1_Template","rf","ctx","_r3","NotifierContainerComponent_li_1_Template_notifier_notification_ready_1_listener","$event","ctx_r2","onNotificationReady","NotifierContainerComponent_li_1_Template_notifier_notification_dismiss_1_listener","ctx_r4","onNotificationDismiss","notification_r1","$implicit","_c0","a0","notification","NotifierNotificationComponent_ng_container_0_Template","ctx_r0","template","NotifierNotificationComponent_ng_template_1_button_2_Template","_r5","NotifierNotificationComponent_ng_template_1_button_2_Template_button_click_0_listener","onClickDismiss","NotifierNotificationComponent_ng_template_1_Template","message","config","behaviour","showDismissButton","NotifierNotification","options","Object","assign","id","undefined","Date","getTime","NotifierNotificationOptions","NotifierQueueService","actionStream","actionQueue","isActionInProgress","action","push","tryToRunNextAction","length","next","shift","ɵfac","NotifierQueueService_Factory","t","ɵprov","token","factory","ctorParameters","type","NotifierOptions","NotifierConfig","customOptions","animations","enabled","hide","easing","offset","preset","speed","overlap","show","autoHide","onClick","onMouseover","stacking","position","horizontal","distance","vertical","gap","theme","NotifierOptionsToken","NotifierConfigToken","NotifierService","notifierQueueService","queueService","notificationOptions","payload","notificationId","NotifierService_Factory","decorators","args","NotifierContainerComponent","changeDetector","notifierService","getConfig","notifications","queueServiceSubscription","subscribe","handleAction","then","unsubscribe","index","notificationComponent","currentNotification","component","continueHandleShowAction","handleShowAction","handleHideAction","handleHideOldestAction","handleHideNewestAction","handleHideAllAction","Promise","resolve","reject","tempPromiseResolver","addNotificationToList","numberOfNotifications","implicitStackingLimit","removeNotificationFromList","stepPromises","oldNotifications","slice","setTimeout","shiftNotifications","getHeight","all","findNotificationById","notificationIndex","findNotificationIndexById","i","animationOffset","removeAllNotificationsFromList","toMakePlace","notificationPromises","markForCheck","filter","item","find","findIndex","NotifierContainerComponent_Factory","ɵcmp","selectors","hostAttrs","decls","vars","consts","NotifierContainerComponent_Template","identifyNotification","directives","NotifierNotificationComponent","encapsulation","changeDetection","OnPush","host","selector","ɵ0","from","opacity","to","ɵ1","fade","ɵ0$1","getShift","transform","horizontalPosition","ɵ1$1","slide","NotifierAnimationService","animationPresets","direction","keyframes","duration","fill","NotifierAnimationService_Factory","NotifierTimerService","now","remaining","finishPromiseResolver","clearTimeout","timerId","window","finish","NotifierTimerService_Factory","elementRef","renderer","notifierTimerService","notifierAnimationService","ready","dismiss","timerService","animationService","element","nativeElement","elementShift","setup","elementHeight","offsetHeight","elementWidth","offsetWidth","emit","animationData","getAnimationData","animatedProperties","keys","setStyle","animation","animate","onfinish","startAutoHideTimer","stopAutoHideTimer","shiftToMakePlace","newElementShift","pauseAutoHideTimer","continueAutoHideTimer","start","pause","stop","addClass","NotifierNotificationComponent_Factory","hostBindings","NotifierNotificationComponent_HostBindings","NotifierNotificationComponent_click_HostBindingHandler","onNotificationClick","NotifierNotificationComponent_mouseout_HostBindingHandler","onNotificationMouseout","NotifierNotificationComponent_mouseover_HostBindingHandler","onNotificationMouseover","inputs","outputs","features","NotifierNotificationComponent_Template","_r1","propDecorators","providers","notifierCustomConfigFactory","notifierDefaultConfigFactory","NotifierModule","ngModule","provide","useValue","deps","useFactory","ɵmod","ɵinj","NotifierModule_Factory","imports","ngJitMode","declarations","exports"],"mappings":"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","file":"default~component-component-module~sample-pages-sample-pages-module-es5.js","sourcesContent":["import { Injectable, InjectionToken, Inject, Component, ChangeDetectionStrategy, ChangeDetectorRef, EventEmitter, ElementRef, Renderer2, Input, Output, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Notification\n *\n * This class describes the structure of a notifiction, including all information it needs to live, and everyone else needs to work with it.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction NotifierContainerComponent_li_1_Template(rf, ctx) { if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"li\", 1);\n    ɵngcc0.ɵɵelementStart(1, \"notifier-notification\", 2);\n    ɵngcc0.ɵɵlistener(\"ready\", function NotifierContainerComponent_li_1_Template_notifier_notification_ready_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.onNotificationReady($event); })(\"dismiss\", function NotifierContainerComponent_li_1_Template_notifier_notification_dismiss_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onNotificationDismiss($event); });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const notification_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"notification\", notification_r1);\n} }\nconst _c0 = function (a0) { return { notification: a0 }; };\nfunction NotifierNotificationComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 2);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.notification.template)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c0, ctx_r0.notification));\n} }\nfunction NotifierNotificationComponent_ng_template_1_button_2_Template(rf, ctx) { if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"button\", 5);\n    ɵngcc0.ɵɵlistener(\"click\", function NotifierNotificationComponent_ng_template_1_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(2); return ctx_r4.onClickDismiss(); });\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(1, \"svg\", 6);\n    ɵngcc0.ɵɵelement(2, \"path\", 7);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} }\nfunction NotifierNotificationComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"p\", 3);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(2, NotifierNotificationComponent_ng_template_1_button_2_Template, 3, 0, \"button\", 4);\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.notification.message);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r2.config.behaviour.showDismissButton);\n} }\nclass NotifierNotification {\n    /**\n     * Constructor\n     *\n     * @param {?} options Notifier options\n     */\n    constructor(options) {\n        /**\n         * The template to customize\n         * the appearance of the notification\n         */\n        this.template = null;\n        Object.assign(this, options);\n        // If not set manually, we have to create a unique notification ID by ourselves. The ID generation relies on the current browser\n        // datetime in ms, in praticular the moment this notification gets constructed. Concurrency, and thus two IDs being the exact same,\n        // is not possible due to the action queue concept.\n        if (options.id === undefined) {\n            this.id = `ID_${new Date().getTime()}`;\n        }\n    }\n}\nif (false) {\n    /**\n     * Unique notification ID, can be set manually to control the notification from outside later on\n     * @type {?}\n     */\n    NotifierNotification.prototype.id;\n    /**\n     * Notification type, will be used for constructing an appropriate class name\n     * @type {?}\n     */\n    NotifierNotification.prototype.type;\n    /**\n     * Notification message\n     * @type {?}\n     */\n    NotifierNotification.prototype.message;\n    /**\n     * The template to customize\n     * the appearance of the notification\n     * @type {?}\n     */\n    NotifierNotification.prototype.template;\n    /**\n     * Component reference of this notification, created and set during creation time\n     * @type {?}\n     */\n    NotifierNotification.prototype.component;\n}\n/**\n * Notifiction options\n *\n * This interface describes which information are needed to create a new notification, or in other words, which information the external API\n * call must provide.\n * @record\n */\nfunction NotifierNotificationOptions() { }\nif (false) {\n    /**\n     * Notification ID, optional\n     * @type {?|undefined}\n     */\n    NotifierNotificationOptions.prototype.id;\n    /**\n     * Notification type\n     * @type {?}\n     */\n    NotifierNotificationOptions.prototype.type;\n    /**\n     * Notificatin message\n     * @type {?}\n     */\n    NotifierNotificationOptions.prototype.message;\n    /**\n     * The template to customize\n     * the appearance of the notification\n     * @type {?|undefined}\n     */\n    NotifierNotificationOptions.prototype.template;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Notifier queue service\n *\n * In general, API calls don't get processed right away. Instead, we have to queue them up in order to prevent simultanious API calls\n * interfering with each other. This, at least in theory, is possible at any time. In particular, animations - which potentially overlap -\n * can cause changes in JS classes as well as affect the DOM. Therefore, the queue service takes all actions, puts them in a queue, and\n * processes them at the right time (which is when the previous action has been processed successfully).\n *\n * Technical sidenote:\n * An action looks pretty similar to the ones within the Flux / Redux pattern.\n */\nclass NotifierQueueService {\n    /**\n     * Constructor\n     */\n    constructor() {\n        this.actionStream = new Subject();\n        this.actionQueue = [];\n        this.isActionInProgress = false;\n    }\n    /**\n     * Push a new action to the queue, and try to run it\n     *\n     * @param {?} action Action object\n     * @return {?}\n     */\n    push(action) {\n        this.actionQueue.push(action);\n        this.tryToRunNextAction();\n    }\n    /**\n     * Continue with the next action (called when the current action is finished)\n     * @return {?}\n     */\n    continue() {\n        this.isActionInProgress = false;\n        this.tryToRunNextAction();\n    }\n    /**\n     * Try to run the next action in the queue; we skip if there already is some action in progress, or if there is no action left\n     * @private\n     * @return {?}\n     */\n    tryToRunNextAction() {\n        if (this.isActionInProgress || this.actionQueue.length === 0) {\n            return; // Skip (the queue can now go drink a coffee as it has nothing to do anymore)\n        }\n        this.isActionInProgress = true;\n        this.actionStream.next(this.actionQueue.shift()); // Push next action to the stream, and remove the current action from the queue\n    }\n}\nNotifierQueueService.ɵfac = function NotifierQueueService_Factory(t) { return new (t || NotifierQueueService)(); };\nNotifierQueueService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NotifierQueueService, factory: NotifierQueueService.ɵfac });\n/** @nocollapse */\nNotifierQueueService.ctorParameters = () => [];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NotifierQueueService, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\nif (false) {\n    /**\n     * Stream of actions, subscribable from outside\n     * @type {?}\n     */\n    NotifierQueueService.prototype.actionStream;\n    /**\n     * Queue of actions\n     * @type {?}\n     * @private\n     */\n    NotifierQueueService.prototype.actionQueue;\n    /**\n     * Flag, true if some action is currently in progress\n     * @type {?}\n     * @private\n     */\n    NotifierQueueService.prototype.isActionInProgress;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Notifier options\n * @record\n */\nfunction NotifierOptions() { }\nif (false) {\n    /** @type {?|undefined} */\n    NotifierOptions.prototype.animations;\n    /** @type {?|undefined} */\n    NotifierOptions.prototype.behaviour;\n    /** @type {?|undefined} */\n    NotifierOptions.prototype.position;\n    /** @type {?|undefined} */\n    NotifierOptions.prototype.theme;\n}\n/**\n * Notifier configuration\n *\n * The notifier configuration defines what notifications look like, how they behave, and how they get animated. It is a global\n * configuration, which means that it only can be set once (at the beginning), and cannot be changed afterwards. Aligning to the world of\n * Angular, this configuration can be provided in the root app module - alternatively, a meaningful default configuration will be used.\n */\nclass NotifierConfig {\n    /**\n     * Constructor\n     *\n     * @param {?=} customOptions\n     */\n    constructor(customOptions = {}) {\n        // Set default values\n        this.animations = {\n            enabled: true,\n            hide: {\n                easing: 'ease',\n                offset: 50,\n                preset: 'fade',\n                speed: 300\n            },\n            overlap: 150,\n            shift: {\n                easing: 'ease',\n                speed: 300\n            },\n            show: {\n                easing: 'ease',\n                preset: 'slide',\n                speed: 300\n            }\n        };\n        this.behaviour = {\n            autoHide: 7000,\n            onClick: false,\n            onMouseover: 'pauseAutoHide',\n            showDismissButton: true,\n            stacking: 4\n        };\n        this.position = {\n            horizontal: {\n                distance: 12,\n                position: 'left'\n            },\n            vertical: {\n                distance: 12,\n                gap: 10,\n                position: 'bottom'\n            }\n        };\n        this.theme = 'material';\n        // The following merges the custom options into the notifier config, respecting the already set default values\n        // This linear, more explicit and code-sizy workflow is preferred here over a recursive one (because we know the object structure)\n        // Technical sidenote: Objects are merged, other types of values simply overwritten / copied\n        if (customOptions.theme !== undefined) {\n            this.theme = customOptions.theme;\n        }\n        if (customOptions.animations !== undefined) {\n            if (customOptions.animations.enabled !== undefined) {\n                this.animations.enabled = customOptions.animations.enabled;\n            }\n            if (customOptions.animations.overlap !== undefined) {\n                this.animations.overlap = customOptions.animations.overlap;\n            }\n            if (customOptions.animations.hide !== undefined) {\n                Object.assign(this.animations.hide, customOptions.animations.hide);\n            }\n            if (customOptions.animations.shift !== undefined) {\n                Object.assign(this.animations.shift, customOptions.animations.shift);\n            }\n            if (customOptions.animations.show !== undefined) {\n                Object.assign(this.animations.show, customOptions.animations.show);\n            }\n        }\n        if (customOptions.behaviour !== undefined) {\n            Object.assign(this.behaviour, customOptions.behaviour);\n        }\n        if (customOptions.position !== undefined) {\n            if (customOptions.position.horizontal !== undefined) {\n                Object.assign(this.position.horizontal, customOptions.position.horizontal);\n            }\n            if (customOptions.position.vertical !== undefined) {\n                Object.assign(this.position.vertical, customOptions.position.vertical);\n            }\n        }\n    }\n}\nif (false) {\n    /**\n     * Customize animations\n     * @type {?}\n     */\n    NotifierConfig.prototype.animations;\n    /**\n     * Customize behaviour\n     * @type {?}\n     */\n    NotifierConfig.prototype.behaviour;\n    /**\n     * Customize positioning\n     * @type {?}\n     */\n    NotifierConfig.prototype.position;\n    /**\n     * Customize theming\n     * @type {?}\n     */\n    NotifierConfig.prototype.theme;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// tslint:disable variable-name\n/**\n * Injection Token for notifier options\n * @type {?}\n */\nconst NotifierOptionsToken = new InjectionToken('[angular-notifier] Notifier Options');\n/**\n * Injection Token for notifier configuration\n * @type {?}\n */\nconst NotifierConfigToken = new InjectionToken('[anuglar-notifier] Notifier Config');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Notifier service\n *\n * This service provides access to the public notifier API. Once injected into a component, directive, pipe, service, or any other building\n * block of an applications, it can be used to show new notifications, and hide existing ones. Internally, it transforms API calls into\n * actions, which then get thrown into the action queue - eventually being processed at the right moment.\n */\nclass NotifierService {\n    /**\n     * Constructor\n     *\n     * @param {?} notifierQueueService Notifier queue service\n     * @param {?} config               Notifier configuration, optionally injected as a dependency\n     */\n    constructor(notifierQueueService, config) {\n        this.queueService = notifierQueueService;\n        this.config = config;\n    }\n    /**\n     * Get the notifier configuration\n     *\n     * @return {?} Notifier configuration\n     */\n    getConfig() {\n        return this.config;\n    }\n    /**\n     * API: Show a new notification\n     *\n     * @param {?} notificationOptions Notification options\n     * @return {?}\n     */\n    show(notificationOptions) {\n        this.queueService.push({\n            payload: notificationOptions,\n            type: 'SHOW'\n        });\n    }\n    /**\n     * API: Hide a specific notification, given its ID\n     *\n     * @param {?} notificationId ID of the notification to hide\n     * @return {?}\n     */\n    hide(notificationId) {\n        this.queueService.push({\n            payload: notificationId,\n            type: 'HIDE'\n        });\n    }\n    /**\n     * API: Hide the newest notification\n     * @return {?}\n     */\n    hideNewest() {\n        this.queueService.push({\n            type: 'HIDE_NEWEST'\n        });\n    }\n    /**\n     * API: Hide the oldest notification\n     * @return {?}\n     */\n    hideOldest() {\n        this.queueService.push({\n            type: 'HIDE_OLDEST'\n        });\n    }\n    /**\n     * API: Hide all notifications at once\n     * @return {?}\n     */\n    hideAll() {\n        this.queueService.push({\n            type: 'HIDE_ALL'\n        });\n    }\n    /**\n     * API: Shortcut for showing a new notification\n     *\n     * @param {?} type             Type of the notification\n     * @param {?} message          Message of the notification\n     * @param {?=} notificationId\n     * @return {?}\n     */\n    notify(type, message, notificationId) {\n        /** @type {?} */\n        let notificationOptions = {\n            message,\n            type\n        };\n        if (notificationId !== undefined) {\n            notificationOptions.id = notificationId;\n        }\n        this.show(notificationOptions);\n    }\n}\nNotifierService.ɵfac = function NotifierService_Factory(t) { return new (t || NotifierService)(ɵngcc0.ɵɵinject(NotifierQueueService), ɵngcc0.ɵɵinject(NotifierConfigToken)); };\nNotifierService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NotifierService, factory: NotifierService.ɵfac });\n/** @nocollapse */\nNotifierService.ctorParameters = () => [\n    { type: NotifierQueueService },\n    { type: NotifierConfig, decorators: [{ type: Inject, args: [NotifierConfigToken,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NotifierService, [{\n        type: Injectable\n    }], function () { return [{ type: NotifierQueueService }, { type: NotifierConfig, decorators: [{\n                type: Inject,\n                args: [NotifierConfigToken]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * Notifier queue service\n     * @type {?}\n     * @private\n     */\n    NotifierService.prototype.queueService;\n    /**\n     * Notifier configuration\n     * @type {?}\n     * @private\n     */\n    NotifierService.prototype.config;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Notifier container component\n * ----------------------------\n * This component acts as a wrapper for all notification components; consequently, it is responsible for creating a new notification\n * component and removing an existing notification component. Being more precicely, it also handles side effects of those actions, such as\n * shifting or even completely removing other notifications as well. Overall, this components handles actions coming from the queue service\n * by subscribing to its action stream.\n *\n * Technical sidenote:\n * This component has to be used somewhere in an application to work; it will not inject and create itself automatically, primarily in order\n * to not break the Angular AoT compilation. Moreover, this component (and also the notification components) set their change detection\n * strategy onPush, which means that we handle change detection manually in order to get the best performance. (#perfmatters)\n */\nclass NotifierContainerComponent {\n    /**\n     * Constructor\n     *\n     * @param {?} changeDetector       Change detector, used for manually triggering change detection runs\n     * @param {?} notifierQueueService Notifier queue service\n     * @param {?} notifierService      Notifier service\n     */\n    constructor(changeDetector, notifierQueueService, notifierService) {\n        this.changeDetector = changeDetector;\n        this.queueService = notifierQueueService;\n        this.config = notifierService.getConfig();\n        this.notifications = [];\n        // Connects this component up to the action queue, then handle incoming actions\n        this.queueServiceSubscription = this.queueService.actionStream.subscribe((/**\n         * @param {?} action\n         * @return {?}\n         */\n        (action) => {\n            this.handleAction(action).then((/**\n             * @return {?}\n             */\n            () => {\n                this.queueService.continue();\n            }));\n        }));\n    }\n    /**\n     * Component destroyment lifecycle hook, cleans up the observable subsciption\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.queueServiceSubscription) {\n            this.queueServiceSubscription.unsubscribe();\n        }\n    }\n    /**\n     * Notification identifier, used as the ngFor trackby function\n     *\n     * @param {?} index        Index\n     * @param {?} notification Notifier notification\n     * @return {?} Notification ID as the unique identnfier\n     */\n    identifyNotification(index, notification) {\n        return notification.id;\n    }\n    /**\n     * Event handler, handles clicks on notification dismiss buttons\n     *\n     * @param {?} notificationId ID of the notification to dismiss\n     * @return {?}\n     */\n    onNotificationDismiss(notificationId) {\n        this.queueService.push({\n            payload: notificationId,\n            type: 'HIDE'\n        });\n    }\n    /**\n     * Event handler, handles notification ready events\n     *\n     * @param {?} notificationComponent Notification component reference\n     * @return {?}\n     */\n    onNotificationReady(notificationComponent) {\n        /** @type {?} */\n        let currentNotification = this.notifications[this.notifications.length - 1];\n        currentNotification.component = notificationComponent; // Save the new omponent reference\n        this.continueHandleShowAction(currentNotification); // Continue with handling the show action\n    }\n    /**\n     * Handle incoming actions by mapping action types to methods, and then running them\n     *\n     * @private\n     * @param {?} action Action object\n     * @return {?} Promise, resolved when done\n     */\n    handleAction(action) {\n        switch (action.type) { // TODO: Maybe a map (actionType -> class method) is a cleaner solution here?\n            case 'SHOW':\n                return this.handleShowAction(action);\n            case 'HIDE':\n                return this.handleHideAction(action);\n            case 'HIDE_OLDEST':\n                return this.handleHideOldestAction(action);\n            case 'HIDE_NEWEST':\n                return this.handleHideNewestAction(action);\n            case 'HIDE_ALL':\n                return this.handleHideAllAction(action);\n            default:\n                return new Promise((/**\n                 * @param {?} resolve\n                 * @param {?} reject\n                 * @return {?}\n                 */\n                (resolve, reject) => {\n                    resolve(); // Ignore unknown action types\n                }));\n        }\n    }\n    /**\n     * Show a new notification\n     *\n     * We simply add the notification to the list, and then wait until its properly initialized / created / rendered.\n     *\n     * @private\n     * @param {?} action Action object\n     * @return {?} Promise, resolved when done\n     */\n    handleShowAction(action) {\n        return new Promise((/**\n         * @param {?} resolve\n         * @param {?} reject\n         * @return {?}\n         */\n        (resolve, reject) => {\n            this.tempPromiseResolver = resolve; // Save the promise resolve function so that it can be called later on by another method\n            this.addNotificationToList(new NotifierNotification(action.payload));\n        }));\n    }\n    /**\n     * Continue to show a new notification (after the notification components is initialized / created / rendered).\n     *\n     * If this is the first (and thus only) notification, we can simply show it. Otherwhise, if stacking is disabled (or a low value), we\n     * switch out notifications, in particular we hide the existing one, and then show our new one. Yet, if stacking is enabled, we first\n     * shift all older notifications, and then show our new notification. In addition, if there are too many notification on the screen,\n     * we hide the oldest one first. Furthermore, if configured, animation overlapping is applied.\n     *\n     * @private\n     * @param {?} notification New notification to show\n     * @return {?}\n     */\n    continueHandleShowAction(notification) {\n        // First (which means only one) notification in the list?\n        /** @type {?} */\n        const numberOfNotifications = this.notifications.length;\n        if (numberOfNotifications === 1) {\n            notification.component.show().then(this.tempPromiseResolver); // Done\n        }\n        else {\n            /** @type {?} */\n            const implicitStackingLimit = 2;\n            // Stacking enabled? (stacking value below 2 means stacking is disabled)\n            if (this.config.behaviour.stacking === false || this.config.behaviour.stacking < implicitStackingLimit) {\n                this.notifications[0].component.hide().then((/**\n                 * @return {?}\n                 */\n                () => {\n                    this.removeNotificationFromList(this.notifications[0]);\n                    notification.component.show().then(this.tempPromiseResolver); // Done\n                }));\n            }\n            else {\n                /** @type {?} */\n                const stepPromises = [];\n                // Are there now too many notifications?\n                if (numberOfNotifications > this.config.behaviour.stacking) {\n                    /** @type {?} */\n                    const oldNotifications = this.notifications.slice(1, numberOfNotifications - 1);\n                    // Are animations enabled?\n                    if (this.config.animations.enabled) {\n                        // Is animation overlap enabled?\n                        if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\n                            stepPromises.push(this.notifications[0].component.hide());\n                            setTimeout((/**\n                             * @return {?}\n                             */\n                            () => {\n                                stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n                            }), this.config.animations.hide.speed - this.config.animations.overlap);\n                            setTimeout((/**\n                             * @return {?}\n                             */\n                            () => {\n                                stepPromises.push(notification.component.show());\n                            }), this.config.animations.hide.speed + this.config.animations.shift.speed - this.config.animations.overlap);\n                        }\n                        else {\n                            stepPromises.push(new Promise((/**\n                             * @param {?} resolve\n                             * @param {?} reject\n                             * @return {?}\n                             */\n                            (resolve, reject) => {\n                                this.notifications[0].component.hide().then((/**\n                                 * @return {?}\n                                 */\n                                () => {\n                                    this.shiftNotifications(oldNotifications, notification.component.getHeight(), true).then((/**\n                                     * @return {?}\n                                     */\n                                    () => {\n                                        notification.component.show().then(resolve);\n                                    }));\n                                }));\n                            })));\n                        }\n                    }\n                    else {\n                        stepPromises.push(this.notifications[0].component.hide());\n                        stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n                        stepPromises.push(notification.component.show());\n                    }\n                }\n                else {\n                    /** @type {?} */\n                    const oldNotifications = this.notifications.slice(0, numberOfNotifications - 1);\n                    // Are animations enabled?\n                    if (this.config.animations.enabled) {\n                        // Is animation overlap enabled?\n                        if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\n                            stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n                            setTimeout((/**\n                             * @return {?}\n                             */\n                            () => {\n                                stepPromises.push(notification.component.show());\n                            }), this.config.animations.shift.speed - this.config.animations.overlap);\n                        }\n                        else {\n                            stepPromises.push(new Promise((/**\n                             * @param {?} resolve\n                             * @param {?} reject\n                             * @return {?}\n                             */\n                            (resolve, reject) => {\n                                this.shiftNotifications(oldNotifications, notification.component.getHeight(), true).then((/**\n                                 * @return {?}\n                                 */\n                                () => {\n                                    notification.component.show().then(resolve);\n                                }));\n                            })));\n                        }\n                    }\n                    else {\n                        stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n                        stepPromises.push(notification.component.show());\n                    }\n                }\n                Promise.all(stepPromises).then((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (numberOfNotifications > this.config.behaviour.stacking) {\n                        this.removeNotificationFromList(this.notifications[0]);\n                    }\n                    this.tempPromiseResolver();\n                })); // Done\n            }\n        }\n    }\n    /**\n     * Hide an existing notification\n     *\n     * Fist, we skip everything if there are no notifications at all, or the given notification does not exist. Then, we hide the given\n     * notification. If there exist older notifications, we then shift them around to fill the gap. Once both hiding the given notification\n     * and shifting the older notificaitons is done, the given notification gets finally removed (from the DOM).\n     *\n     * @private\n     * @param {?} action Action object, payload contains the notification ID\n     * @return {?} Promise, resolved when done\n     */\n    handleHideAction(action) {\n        return new Promise((/**\n         * @param {?} resolve\n         * @param {?} reject\n         * @return {?}\n         */\n        (resolve, reject) => {\n            /** @type {?} */\n            const stepPromises = [];\n            // Does the notification exist / are there even any notifications? (let's prevent accidential errors)\n            /** @type {?} */\n            const notification = this.findNotificationById(action.payload);\n            if (notification === undefined) {\n                resolve();\n                return;\n            }\n            // Get older notifications\n            /** @type {?} */\n            const notificationIndex = this.findNotificationIndexById(action.payload);\n            if (notificationIndex === undefined) {\n                resolve();\n                return;\n            }\n            /** @type {?} */\n            const oldNotifications = this.notifications.slice(0, notificationIndex);\n            // Do older notifications exist, and thus do we need to shift other notifications as a consequence?\n            if (oldNotifications.length > 0) {\n                // Are animations enabled?\n                if (this.config.animations.enabled && this.config.animations.hide.speed > 0) {\n                    // Is animation overlap enabled?\n                    if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\n                        stepPromises.push(notification.component.hide());\n                        setTimeout((/**\n                         * @return {?}\n                         */\n                        () => {\n                            stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\n                        }), this.config.animations.hide.speed - this.config.animations.overlap);\n                    }\n                    else {\n                        notification.component.hide().then((/**\n                         * @return {?}\n                         */\n                        () => {\n                            stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\n                        }));\n                    }\n                }\n                else {\n                    stepPromises.push(notification.component.hide());\n                    stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\n                }\n            }\n            else {\n                stepPromises.push(notification.component.hide());\n            }\n            // Wait until both hiding and shifting is done, then remove the notification from the list\n            Promise.all(stepPromises).then((/**\n             * @return {?}\n             */\n            () => {\n                this.removeNotificationFromList(notification);\n                resolve(); // Done\n            }));\n        }));\n    }\n    /**\n     * Hide the oldest notification (bridge to handleHideAction)\n     *\n     * @private\n     * @param {?} action Action object\n     * @return {?} Promise, resolved when done\n     */\n    handleHideOldestAction(action) {\n        // Are there any notifications? (prevent accidential errors)\n        if (this.notifications.length === 0) {\n            return new Promise((/**\n             * @param {?} resolve\n             * @param {?} reject\n             * @return {?}\n             */\n            (resolve, reject) => {\n                resolve();\n            })); // Done\n        }\n        else {\n            action.payload = this.notifications[0].id;\n            return this.handleHideAction(action);\n        }\n    }\n    /**\n     * Hide the newest notification (bridge to handleHideAction)\n     *\n     * @private\n     * @param {?} action Action object\n     * @return {?} Promise, resolved when done\n     */\n    handleHideNewestAction(action) {\n        // Are there any notifications? (prevent accidential errors)\n        if (this.notifications.length === 0) {\n            return new Promise((/**\n             * @param {?} resolve\n             * @param {?} reject\n             * @return {?}\n             */\n            (resolve, reject) => {\n                resolve();\n            })); // Done\n        }\n        else {\n            action.payload = this.notifications[this.notifications.length - 1].id;\n            return this.handleHideAction(action);\n        }\n    }\n    /**\n     * Hide all notifications at once\n     *\n     * @private\n     * @param {?} action Action object\n     * @return {?} Promise, resolved when done\n     */\n    handleHideAllAction(action) {\n        return new Promise((/**\n         * @param {?} resolve\n         * @param {?} reject\n         * @return {?}\n         */\n        (resolve, reject) => {\n            // Are there any notifications? (prevent accidential errors)\n            /** @type {?} */\n            const numberOfNotifications = this.notifications.length;\n            if (numberOfNotifications === 0) {\n                resolve(); // Done\n                return;\n            }\n            // Are animations enabled?\n            if (this.config.animations.enabled && this.config.animations.hide.speed > 0 && this.config.animations.hide.offset !== false &&\n                this.config.animations.hide.offset > 0) {\n                for (let i = numberOfNotifications - 1; i >= 0; i--) {\n                    /** @type {?} */\n                    const animationOffset = this.config.position.vertical.position === 'top' ? numberOfNotifications - 1 : i;\n                    setTimeout((/**\n                     * @return {?}\n                     */\n                    () => {\n                        this.notifications[i].component.hide().then((/**\n                         * @return {?}\n                         */\n                        () => {\n                            // Are we done here, was this the last notification to be hidden?\n                            if ((this.config.position.vertical.position === 'top' && i === 0) ||\n                                (this.config.position.vertical.position === 'bottom' && i === numberOfNotifications - 1)) {\n                                this.removeAllNotificationsFromList();\n                                resolve(); // Done\n                            }\n                        }));\n                    }), this.config.animations.hide.offset * animationOffset);\n                }\n            }\n            else {\n                /** @type {?} */\n                let stepPromises = [];\n                for (let i = numberOfNotifications - 1; i >= 0; i--) {\n                    stepPromises.push(this.notifications[i].component.hide());\n                }\n                Promise.all(stepPromises).then((/**\n                 * @return {?}\n                 */\n                () => {\n                    this.removeAllNotificationsFromList();\n                    resolve(); // Done\n                }));\n            }\n        }));\n    }\n    /**\n     * Shift multiple notifications at once\n     *\n     * @private\n     * @param {?} notifications List containing the notifications to be shifted\n     * @param {?} distance      Distance to shift (in px)\n     * @param {?} toMakePlace   Flag, defining in which direciton to shift\n     * @return {?} Promise, resolved when done\n     */\n    shiftNotifications(notifications, distance, toMakePlace) {\n        return new Promise((/**\n         * @param {?} resolve\n         * @param {?} reject\n         * @return {?}\n         */\n        (resolve, reject) => {\n            // Are there any notifications to shift?\n            if (notifications.length === 0) {\n                resolve();\n                return;\n            }\n            /** @type {?} */\n            let notificationPromises = [];\n            for (let i = notifications.length - 1; i >= 0; i--) {\n                notificationPromises.push(notifications[i].component.shift(distance, toMakePlace));\n            }\n            Promise.all(notificationPromises).then(resolve); // Done\n        }));\n    }\n    /**\n     * Add a new notification to the list of notifications (triggers change detection)\n     *\n     * @private\n     * @param {?} notification Notification to add to the list of notifications\n     * @return {?}\n     */\n    addNotificationToList(notification) {\n        this.notifications.push(notification);\n        this.changeDetector.markForCheck(); // Run change detection because the notification list changed\n    }\n    /**\n     * Remove an existing notification from the list of notifications (triggers change detection)\n     *\n     * @private\n     * @param {?} notification Notification to be removed from the list of notifications\n     * @return {?}\n     */\n    removeNotificationFromList(notification) {\n        this.notifications =\n            this.notifications.filter((/**\n             * @param {?} item\n             * @return {?}\n             */\n            (item) => item.component !== notification.component));\n        this.changeDetector.markForCheck(); // Run change detection because the notification list changed\n    }\n    /**\n     * Remove all notifications from the list (triggers change detection)\n     * @private\n     * @return {?}\n     */\n    removeAllNotificationsFromList() {\n        this.notifications = [];\n        this.changeDetector.markForCheck(); // Run change detection because the notification list changed\n    }\n    /**\n     * Helper: Find a notification in the notification list by a given notification ID\n     *\n     * @private\n     * @param {?} notificationId Notification ID, used for finding notification\n     * @return {?} Notification, undefined if not found\n     */\n    findNotificationById(notificationId) {\n        return this.notifications.find((/**\n         * @param {?} currentNotification\n         * @return {?}\n         */\n        (currentNotification) => currentNotification.id === notificationId));\n    }\n    /**\n     * Helper: Find a notification's index by a given notification ID\n     *\n     * @private\n     * @param {?} notificationId Notification ID, used for finding a notification's index\n     * @return {?} Notification index, undefined if not found\n     */\n    findNotificationIndexById(notificationId) {\n        /** @type {?} */\n        const notificationIndex = this.notifications.findIndex((/**\n         * @param {?} currentNotification\n         * @return {?}\n         */\n        (currentNotification) => currentNotification.id === notificationId));\n        return (notificationIndex !== -1 ? notificationIndex : undefined);\n    }\n}\nNotifierContainerComponent.ɵfac = function NotifierContainerComponent_Factory(t) { return new (t || NotifierContainerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(NotifierQueueService), ɵngcc0.ɵɵdirectiveInject(NotifierService)); };\nNotifierContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NotifierContainerComponent, selectors: [[\"notifier-container\"]], hostAttrs: [1, \"notifier__container\"], decls: 2, vars: 2, consts: [[\"class\", \"notifier__container-list\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"notifier__container-list\"], [3, \"notification\", \"ready\", \"dismiss\"]], template: function NotifierContainerComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ul\");\n        ɵngcc0.ɵɵtemplate(1, NotifierContainerComponent_li_1_Template, 2, 1, \"li\", 0);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.notifications)(\"ngForTrackBy\", ctx.identifyNotification);\n    } }, directives: function () { return [ɵngcc1.NgForOf, NotifierNotificationComponent]; }, encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nNotifierContainerComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: NotifierQueueService },\n    { type: NotifierService }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NotifierContainerComponent, [{\n        type: Component,\n        args: [{\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                // (#perfmatters)\n                host: {\n                    class: 'notifier__container'\n                },\n                selector: 'notifier-container',\n                template: \"<ul>\\n\\t<li class=\\\"notifier__container-list\\\" *ngFor=\\\"let notification of notifications; trackBy: identifyNotification;\\\">\\n\\t\\t<notifier-notification\\n\\t\\t\\t[notification]=\\\"notification\\\"\\n\\t\\t\\t(ready)=\\\"onNotificationReady( $event )\\\"\\n\\t\\t\\t(dismiss)=\\\"onNotificationDismiss( $event )\\\">\\n\\t\\t</notifier-notification>\\n\\t</li>\\n</ul>\\n\"\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: NotifierQueueService }, { type: NotifierService }]; }, null); })();\nif (false) {\n    /**\n     * List of currently somewhat active notifications\n     * @type {?}\n     */\n    NotifierContainerComponent.prototype.notifications;\n    /**\n     * Change detector\n     * @type {?}\n     * @private\n     */\n    NotifierContainerComponent.prototype.changeDetector;\n    /**\n     * Notifier queue service\n     * @type {?}\n     * @private\n     */\n    NotifierContainerComponent.prototype.queueService;\n    /**\n     * Notifier configuration\n     * @type {?}\n     * @private\n     */\n    NotifierContainerComponent.prototype.config;\n    /**\n     * Queue service observable subscription (saved for cleanup)\n     * @type {?}\n     * @private\n     */\n    NotifierContainerComponent.prototype.queueServiceSubscription;\n    /**\n     * Promise resolve function reference, temporarily used while the notification child component gets created\n     * @type {?}\n     * @private\n     */\n    NotifierContainerComponent.prototype.tempPromiseResolver;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst ɵ0 = /**\n * @return {?}\n */\n() => {\n    return {\n        from: {\n            opacity: '1'\n        },\n        to: {\n            opacity: '0'\n        }\n    };\n}, ɵ1 = /**\n * @return {?}\n */\n() => {\n    return {\n        from: {\n            opacity: '0'\n        },\n        to: {\n            opacity: '1'\n        }\n    };\n};\n/**\n * Fade animation preset\n * @type {?}\n */\nconst fade = {\n    hide: (ɵ0),\n    show: (ɵ1)\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst ɵ0$1 = /**\n * @param {?} notification\n * @return {?}\n */\n(notification) => {\n    // Prepare variables\n    /** @type {?} */\n    const config = notification.component.getConfig();\n    /** @type {?} */\n    const shift = notification.component.getShift();\n    /** @type {?} */\n    let from;\n    /** @type {?} */\n    let to;\n    // Configure variables, depending on configuration and component\n    if (config.position.horizontal.position === 'left') {\n        from = {\n            transform: `translate3d( 0, ${shift}px, 0 )`\n        };\n        to = {\n            transform: `translate3d( calc( -100% - ${config.position.horizontal.distance}px - 10px ), ${shift}px, 0 )`\n        };\n    }\n    else if (config.position.horizontal.position === 'right') {\n        from = {\n            transform: `translate3d( 0, ${shift}px, 0 )`\n        };\n        to = {\n            transform: `translate3d( calc( 100% + ${config.position.horizontal.distance}px + 10px ), ${shift}px, 0 )`\n        };\n    }\n    else {\n        /** @type {?} */\n        let horizontalPosition;\n        if (config.position.vertical.position === 'top') {\n            horizontalPosition = `calc( -100% - ${config.position.horizontal.distance}px - 10px )`;\n        }\n        else {\n            horizontalPosition = `calc( 100% + ${config.position.horizontal.distance}px + 10px )`;\n        }\n        from = {\n            transform: `translate3d( -50%, ${shift}px, 0 )`\n        };\n        to = {\n            transform: `translate3d( -50%, ${horizontalPosition}, 0 )`\n        };\n    }\n    // Done\n    return {\n        from,\n        to\n    };\n}, ɵ1$1 = /**\n * @param {?} notification\n * @return {?}\n */\n(notification) => {\n    // Prepare variables\n    /** @type {?} */\n    const config = notification.component.getConfig();\n    /** @type {?} */\n    let from;\n    /** @type {?} */\n    let to;\n    // Configure variables, depending on configuration and component\n    if (config.position.horizontal.position === 'left') {\n        from = {\n            transform: `translate3d( calc( -100% - ${config.position.horizontal.distance}px - 10px ), 0, 0 )`\n        };\n        to = {\n            transform: 'translate3d( 0, 0, 0 )'\n        };\n    }\n    else if (config.position.horizontal.position === 'right') {\n        from = {\n            transform: `translate3d( calc( 100% + ${config.position.horizontal.distance}px + 10px ), 0, 0 )`\n        };\n        to = {\n            transform: 'translate3d( 0, 0, 0 )'\n        };\n    }\n    else {\n        /** @type {?} */\n        let horizontalPosition;\n        if (config.position.vertical.position === 'top') {\n            horizontalPosition = `calc( -100% - ${config.position.horizontal.distance}px - 10px )`;\n        }\n        else {\n            horizontalPosition = `calc( 100% + ${config.position.horizontal.distance}px + 10px )`;\n        }\n        from = {\n            transform: `translate3d( -50%, ${horizontalPosition}, 0 )`\n        };\n        to = {\n            transform: 'translate3d( -50%, 0, 0 )'\n        };\n    }\n    // Done\n    return {\n        from,\n        to\n    };\n};\n/**\n * Slide animation preset\n * @type {?}\n */\nconst slide = {\n    hide: (ɵ0$1),\n    show: (ɵ1$1)\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Notifier animation service\n */\nclass NotifierAnimationService {\n    /**\n     * Constructor\n     */\n    constructor() {\n        this.animationPresets = {\n            fade,\n            slide\n        };\n    }\n    /**\n     * Get animation data\n     *\n     * This method generates all data the Web Animations API needs to animate our notification. The result depends on both the animation\n     * direction (either in or out) as well as the notifications (and its attributes) itself.\n     *\n     * @param {?} direction    Animation direction, either in or out\n     * @param {?} notification Notification the animation data should be generated for\n     * @return {?} Animation information\n     */\n    getAnimationData(direction, notification) {\n        // Get all necessary animation data\n        /** @type {?} */\n        let keyframes;\n        /** @type {?} */\n        let duration;\n        /** @type {?} */\n        let easing;\n        if (direction === 'show') {\n            keyframes = this.animationPresets[notification.component.getConfig().animations.show.preset].show(notification);\n            duration = notification.component.getConfig().animations.show.speed;\n            easing = notification.component.getConfig().animations.show.easing;\n        }\n        else {\n            keyframes = this.animationPresets[notification.component.getConfig().animations.hide.preset].hide(notification);\n            duration = notification.component.getConfig().animations.hide.speed;\n            easing = notification.component.getConfig().animations.hide.easing;\n        }\n        // Build and return animation data\n        return {\n            keyframes: [\n                keyframes.from,\n                keyframes.to\n            ],\n            options: {\n                duration,\n                easing,\n                fill: 'forwards' // Keep the newly painted state after the animation finished\n            }\n        };\n    }\n}\nNotifierAnimationService.ɵfac = function NotifierAnimationService_Factory(t) { return new (t || NotifierAnimationService)(); };\nNotifierAnimationService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NotifierAnimationService, factory: NotifierAnimationService.ɵfac });\n/** @nocollapse */\nNotifierAnimationService.ctorParameters = () => [];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NotifierAnimationService, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\nif (false) {\n    /**\n     * List of animation presets (currently static)\n     * @type {?}\n     * @private\n     */\n    NotifierAnimationService.prototype.animationPresets;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Notifier timer service\n *\n * This service acts as a timer, needed due to the still rather limited setTimeout JavaScript API. The timer service can start and stop a\n * timer. Furthermore, it can also pause the timer at any time, and resume later on. The timer API workd promise-based.\n */\nclass NotifierTimerService {\n    /**\n     * Constructor\n     */\n    constructor() {\n        this.now = 0;\n        this.remaining = 0;\n    }\n    /**\n     * Start (or resume) the timer\n     *\n     * @param {?} duration Timer duration, in ms\n     * @return {?} Promise, resolved once the timer finishes\n     */\n    start(duration) {\n        return new Promise((/**\n         * @param {?} resolve\n         * @param {?} reject\n         * @return {?}\n         */\n        (resolve, reject) => {\n            // For the first run ...\n            this.remaining = duration;\n            // Setup, then start the timer\n            this.finishPromiseResolver = resolve;\n            this.continue();\n        }));\n    }\n    /**\n     * Pause the timer\n     * @return {?}\n     */\n    pause() {\n        clearTimeout(this.timerId);\n        this.remaining -= new Date().getTime() - this.now;\n    }\n    /**\n     * Continue the timer\n     * @return {?}\n     */\n    continue() {\n        this.now = new Date().getTime();\n        this.timerId = window.setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            this.finish();\n        }), this.remaining);\n    }\n    /**\n     * Stop the timer\n     * @return {?}\n     */\n    stop() {\n        clearTimeout(this.timerId);\n        this.remaining = 0;\n    }\n    /**\n     * Finish up the timeout by resolving the timer promise\n     * @private\n     * @return {?}\n     */\n    finish() {\n        this.finishPromiseResolver();\n    }\n}\nNotifierTimerService.ɵfac = function NotifierTimerService_Factory(t) { return new (t || NotifierTimerService)(); };\nNotifierTimerService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NotifierTimerService, factory: NotifierTimerService.ɵfac });\n/** @nocollapse */\nNotifierTimerService.ctorParameters = () => [];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NotifierTimerService, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\nif (false) {\n    /**\n     * Timestamp (in ms), created in the moment the timer starts\n     * @type {?}\n     * @private\n     */\n    NotifierTimerService.prototype.now;\n    /**\n     * Remaining time (in ms)\n     * @type {?}\n     * @private\n     */\n    NotifierTimerService.prototype.remaining;\n    /**\n     * Timeout ID, used for clearing the timeout later on\n     * @type {?}\n     * @private\n     */\n    NotifierTimerService.prototype.timerId;\n    /**\n     * Promise resolve function, eventually getting called once the timer finishes\n     * @type {?}\n     * @private\n     */\n    NotifierTimerService.prototype.finishPromiseResolver;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Notifier notification component\n * -------------------------------\n * This component is responsible for actually displaying the notification on screen. In addition, it's able to show and hide this\n * notification, in particular to animate this notification in and out, as well as shift (move) this notification vertically around.\n * Furthermore, the notification component handles all interactions the user has with this notification / component, such as clicks and\n * mouse movements.\n */\nclass NotifierNotificationComponent {\n    /**\n     * Constructor\n     *\n     * @param {?} elementRef               Reference to the component's element\n     * @param {?} renderer                 Angular renderer\n     * @param {?} notifierService          Notifier service\n     * @param {?} notifierTimerService     Notifier timer service\n     * @param {?} notifierAnimationService Notifier animation service\n     */\n    constructor(elementRef, renderer, notifierService, notifierTimerService, notifierAnimationService) {\n        this.config = notifierService.getConfig();\n        this.ready = new EventEmitter();\n        this.dismiss = new EventEmitter();\n        this.timerService = notifierTimerService;\n        this.animationService = notifierAnimationService;\n        this.renderer = renderer;\n        this.element = elementRef.nativeElement;\n        this.elementShift = 0;\n    }\n    /**\n     * Component after view init lifecycle hook, setts up the component and then emits the ready event\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this.setup();\n        this.elementHeight = this.element.offsetHeight;\n        this.elementWidth = this.element.offsetWidth;\n        this.ready.emit(this);\n    }\n    /**\n     * Get the notifier config\n     *\n     * @return {?} Notifier configuration\n     */\n    getConfig() {\n        return this.config;\n    }\n    /**\n     * Get notification element height (in px)\n     *\n     * @return {?} Notification element height (in px)\n     */\n    getHeight() {\n        return this.elementHeight;\n    }\n    /**\n     * Get notification element width (in px)\n     *\n     * @return {?} Notification element height (in px)\n     */\n    getWidth() {\n        return this.elementWidth;\n    }\n    /**\n     * Get notification shift offset (in px)\n     *\n     * @return {?} Notification element shift offset (in px)\n     */\n    getShift() {\n        return this.elementShift;\n    }\n    /**\n     * Show (animate in) this notification\n     *\n     * @return {?} Promise, resolved when done\n     */\n    show() {\n        return new Promise((/**\n         * @param {?} resolve\n         * @param {?} reject\n         * @return {?}\n         */\n        (resolve, reject) => {\n            // Are animations enabled?\n            if (this.config.animations.enabled && this.config.animations.show.speed > 0) {\n                // Get animation data\n                /** @type {?} */\n                const animationData = this.animationService.getAnimationData('show', this.notification);\n                // Set initial styles (styles before animation), prevents quick flicker when animation starts\n                /** @type {?} */\n                const animatedProperties = Object.keys(animationData.keyframes[0]);\n                for (let i = animatedProperties.length - 1; i >= 0; i--) {\n                    this.renderer.setStyle(this.element, animatedProperties[i], animationData.keyframes[0][animatedProperties[i]]);\n                }\n                // Animate notification in\n                this.renderer.setStyle(this.element, 'visibility', 'visible');\n                /** @type {?} */\n                const animation = this.element.animate(animationData.keyframes, animationData.options);\n                animation.onfinish = (/**\n                 * @return {?}\n                 */\n                () => {\n                    this.startAutoHideTimer();\n                    resolve(); // Done\n                });\n            }\n            else {\n                // Show notification\n                this.renderer.setStyle(this.element, 'visibility', 'visible');\n                this.startAutoHideTimer();\n                resolve(); // Done\n            }\n        }));\n    }\n    /**\n     * Hide (animate out) this notification\n     *\n     * @return {?} Promise, resolved when done\n     */\n    hide() {\n        return new Promise((/**\n         * @param {?} resolve\n         * @param {?} reject\n         * @return {?}\n         */\n        (resolve, reject) => {\n            this.stopAutoHideTimer();\n            // Are animations enabled?\n            if (this.config.animations.enabled && this.config.animations.hide.speed > 0) {\n                /** @type {?} */\n                const animationData = this.animationService.getAnimationData('hide', this.notification);\n                /** @type {?} */\n                const animation = this.element.animate(animationData.keyframes, animationData.options);\n                animation.onfinish = (/**\n                 * @return {?}\n                 */\n                () => {\n                    resolve(); // Done\n                });\n            }\n            else {\n                resolve(); // Done\n            }\n        }));\n    }\n    /**\n     * Shift (move) this notification\n     *\n     * @param {?} distance         Distance to shift (in px)\n     * @param {?} shiftToMakePlace Flag, defining in which direction to shift\n     * @return {?} Promise, resolved when done\n     */\n    shift(distance, shiftToMakePlace) {\n        return new Promise((/**\n         * @param {?} resolve\n         * @param {?} reject\n         * @return {?}\n         */\n        (resolve, reject) => {\n            // Calculate new position (position after the shift)\n            /** @type {?} */\n            let newElementShift;\n            if ((this.config.position.vertical.position === 'top' && shiftToMakePlace)\n                || (this.config.position.vertical.position === 'bottom' && !shiftToMakePlace)) {\n                newElementShift = this.elementShift + distance + this.config.position.vertical.gap;\n            }\n            else {\n                newElementShift = this.elementShift - distance - this.config.position.vertical.gap;\n            }\n            /** @type {?} */\n            const horizontalPosition = this.config.position.horizontal.position === 'middle' ? '-50%' : '0';\n            // Are animations enabled?\n            if (this.config.animations.enabled && this.config.animations.shift.speed > 0) {\n                /** @type {?} */\n                const animationData = {\n                    // TODO: Extract into animation service\n                    keyframes: [\n                        {\n                            transform: `translate3d( ${horizontalPosition}, ${this.elementShift}px, 0 )`\n                        },\n                        {\n                            transform: `translate3d( ${horizontalPosition}, ${newElementShift}px, 0 )`\n                        }\n                    ],\n                    options: {\n                        duration: this.config.animations.shift.speed,\n                        easing: this.config.animations.shift.easing,\n                        fill: 'forwards'\n                    }\n                };\n                this.elementShift = newElementShift;\n                /** @type {?} */\n                const animation = this.element.animate(animationData.keyframes, animationData.options);\n                animation.onfinish = (/**\n                 * @return {?}\n                 */\n                () => {\n                    resolve(); // Done\n                });\n            }\n            else {\n                this.renderer.setStyle(this.element, 'transform', `translate3d( ${horizontalPosition}, ${newElementShift}px, 0 )`);\n                this.elementShift = newElementShift;\n                resolve(); // Done\n            }\n        }));\n    }\n    /**\n     * Handle click on dismiss button\n     * @return {?}\n     */\n    onClickDismiss() {\n        this.dismiss.emit(this.notification.id);\n    }\n    /**\n     * Handle mouseover over notification area\n     * @return {?}\n     */\n    onNotificationMouseover() {\n        if (this.config.behaviour.onMouseover === 'pauseAutoHide') {\n            this.pauseAutoHideTimer();\n        }\n        else if (this.config.behaviour.onMouseover === 'resetAutoHide') {\n            this.stopAutoHideTimer();\n        }\n    }\n    /**\n     * Handle mouseout from notification area\n     * @return {?}\n     */\n    onNotificationMouseout() {\n        if (this.config.behaviour.onMouseover === 'pauseAutoHide') {\n            this.continueAutoHideTimer();\n        }\n        else if (this.config.behaviour.onMouseover === 'resetAutoHide') {\n            this.startAutoHideTimer();\n        }\n    }\n    /**\n     * Handle click on notification area\n     * @return {?}\n     */\n    onNotificationClick() {\n        if (this.config.behaviour.onClick === 'hide') {\n            this.onClickDismiss();\n        }\n    }\n    /**\n     * Start the auto hide timer (if enabled)\n     * @private\n     * @return {?}\n     */\n    startAutoHideTimer() {\n        if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n            this.timerService.start(this.config.behaviour.autoHide).then((/**\n             * @return {?}\n             */\n            () => {\n                this.onClickDismiss();\n            }));\n        }\n    }\n    /**\n     * Pause the auto hide timer (if enabled)\n     * @private\n     * @return {?}\n     */\n    pauseAutoHideTimer() {\n        if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n            this.timerService.pause();\n        }\n    }\n    /**\n     * Continue the auto hide timer (if enabled)\n     * @private\n     * @return {?}\n     */\n    continueAutoHideTimer() {\n        if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n            this.timerService.continue();\n        }\n    }\n    /**\n     * Stop the auto hide timer (if enabled)\n     * @private\n     * @return {?}\n     */\n    stopAutoHideTimer() {\n        if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n            this.timerService.stop();\n        }\n    }\n    /**\n     * Initial notification setup\n     * @private\n     * @return {?}\n     */\n    setup() {\n        // Set start position (initially the exact same for every new notification)\n        if (this.config.position.horizontal.position === 'left') {\n            this.renderer.setStyle(this.element, 'left', `${this.config.position.horizontal.distance}px`);\n        }\n        else if (this.config.position.horizontal.position === 'right') {\n            this.renderer.setStyle(this.element, 'right', `${this.config.position.horizontal.distance}px`);\n        }\n        else {\n            this.renderer.setStyle(this.element, 'left', '50%');\n            // Let's get the GPU handle some work as well (#perfmatters)\n            this.renderer.setStyle(this.element, 'transform', 'translate3d( -50%, 0, 0 )');\n        }\n        if (this.config.position.vertical.position === 'top') {\n            this.renderer.setStyle(this.element, 'top', `${this.config.position.vertical.distance}px`);\n        }\n        else {\n            this.renderer.setStyle(this.element, 'bottom', `${this.config.position.vertical.distance}px`);\n        }\n        // Add classes (responsible for visual design)\n        this.renderer.addClass(this.element, `notifier__notification--${this.notification.type}`);\n        this.renderer.addClass(this.element, `notifier__notification--${this.config.theme}`);\n    }\n}\nNotifierNotificationComponent.ɵfac = function NotifierNotificationComponent_Factory(t) { return new (t || NotifierNotificationComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(NotifierService), ɵngcc0.ɵɵdirectiveInject(NotifierTimerService), ɵngcc0.ɵɵdirectiveInject(NotifierAnimationService)); };\nNotifierNotificationComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NotifierNotificationComponent, selectors: [[\"notifier-notification\"]], hostAttrs: [1, \"notifier__notification\"], hostBindings: function NotifierNotificationComponent_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function NotifierNotificationComponent_click_HostBindingHandler() { return ctx.onNotificationClick(); })(\"mouseout\", function NotifierNotificationComponent_mouseout_HostBindingHandler() { return ctx.onNotificationMouseout(); })(\"mouseover\", function NotifierNotificationComponent_mouseover_HostBindingHandler() { return ctx.onNotificationMouseover(); });\n    } }, inputs: { notification: \"notification\" }, outputs: { ready: \"ready\", dismiss: \"dismiss\" }, features: [ɵngcc0.ɵɵProvidersFeature([\n            // We provide the timer to the component's local injector, so that every notification components gets its own\n            // instance of the timer service, thus running their timers independently from each other\n            NotifierTimerService\n        ])], decls: 3, vars: 2, consts: [[3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\", 4, \"ngIf\", \"ngIfElse\"], [\"predefinedNotification\", \"\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"notifier__notification-message\"], [\"class\", \"notifier__notification-button\", \"type\", \"button\", \"title\", \"dismiss\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", \"title\", \"dismiss\", 1, \"notifier__notification-button\", 3, \"click\"], [\"viewBox\", \"0 0 24 24\", \"width\", \"20\", \"height\", \"20\", 1, \"notifier__notification-button-icon\"], [\"d\", \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"]], template: function NotifierNotificationComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, NotifierNotificationComponent_ng_container_0_Template, 1, 4, \"ng-container\", 0);\n        ɵngcc0.ɵɵtemplate(1, NotifierNotificationComponent_ng_template_1_Template, 3, 2, \"ng-template\", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);\n    } if (rf & 2) {\n        const _r1 = ɵngcc0.ɵɵreference(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.notification.template)(\"ngIfElse\", _r1);\n    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nNotifierNotificationComponent.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: NotifierService },\n    { type: NotifierTimerService },\n    { type: NotifierAnimationService }\n];\nNotifierNotificationComponent.propDecorators = {\n    notification: [{ type: Input }],\n    ready: [{ type: Output }],\n    dismiss: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NotifierNotificationComponent, [{\n        type: Component,\n        args: [{\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                // (#perfmatters)\n                host: {\n                    '(click)': 'onNotificationClick()',\n                    '(mouseout)': 'onNotificationMouseout()',\n                    '(mouseover)': 'onNotificationMouseover()',\n                    class: 'notifier__notification'\n                },\n                providers: [\n                    // We provide the timer to the component's local injector, so that every notification components gets its own\n                    // instance of the timer service, thus running their timers independently from each other\n                    NotifierTimerService\n                ],\n                selector: 'notifier-notification',\n                template: \"<ng-container *ngIf=\\\"notification.template; else predefinedNotification\\\" [ngTemplateOutlet]=\\\"notification.template\\\" [ngTemplateOutletContext]=\\\"{ notification: notification }\\\">\\n</ng-container>\\n\\n<ng-template #predefinedNotification>\\n\\t<p class=\\\"notifier__notification-message\\\">{{ notification.message }}</p>\\n\\t<button class=\\\"notifier__notification-button\\\" type=\\\"button\\\" title=\\\"dismiss\\\" *ngIf=\\\"config.behaviour.showDismissButton\\\" (click)=\\\"onClickDismiss()\\\">\\n\\t\\t<svg class=\\\"notifier__notification-button-icon\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"20\\\" height=\\\"20\\\">\\n\\t\\t\\t<path d=\\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\\" />\\n\\t\\t</svg>\\n\\t</button>\\n</ng-template>\\n\"\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: NotifierService }, { type: NotifierTimerService }, { type: NotifierAnimationService }]; }, { ready: [{\n            type: Output\n        }], dismiss: [{\n            type: Output\n        }], notification: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /**\n     * Input: Notification object, contains all details necessary to construct the notification\n     * @type {?}\n     */\n    NotifierNotificationComponent.prototype.notification;\n    /**\n     * Output: Ready event, handles the initialization success by emitting a reference to this notification component\n     * @type {?}\n     */\n    NotifierNotificationComponent.prototype.ready;\n    /**\n     * Output: Dismiss event, handles the click on the dismiss button by emitting the notification ID of this notification component\n     * @type {?}\n     */\n    NotifierNotificationComponent.prototype.dismiss;\n    /**\n     * Notifier configuration\n     * @type {?}\n     */\n    NotifierNotificationComponent.prototype.config;\n    /**\n     * Notifier timer service\n     * @type {?}\n     * @private\n     */\n    NotifierNotificationComponent.prototype.timerService;\n    /**\n     * Notifier animation service\n     * @type {?}\n     * @private\n     */\n    NotifierNotificationComponent.prototype.animationService;\n    /**\n     * Angular renderer, used to preserve the overall DOM abstraction & independence\n     * @type {?}\n     * @private\n     */\n    NotifierNotificationComponent.prototype.renderer;\n    /**\n     * Native element reference, used for manipulating DOM properties\n     * @type {?}\n     * @private\n     */\n    NotifierNotificationComponent.prototype.element;\n    /**\n     * Current notification height, calculated and cached here (#perfmatters)\n     * @type {?}\n     * @private\n     */\n    NotifierNotificationComponent.prototype.elementHeight;\n    /**\n     * Current notification width, calculated and cached here (#perfmatters)\n     * @type {?}\n     * @private\n     */\n    NotifierNotificationComponent.prototype.elementWidth;\n    /**\n     * Current notification shift, calculated and cached here (#perfmatters)\n     * @type {?}\n     * @private\n     */\n    NotifierNotificationComponent.prototype.elementShift;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Factory for a notifier configuration with custom options\n *\n * Sidenote:\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\n *\n * @param {?} options - Custom notifier options\n * @return {?} - Notifier configuration as result\n */\nfunction notifierCustomConfigFactory(options) {\n    return new NotifierConfig(options);\n}\n/**\n * Factory for a notifier configuration with default options\n *\n * Sidenote:\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\n *\n * @return {?} - Notifier configuration as result\n */\nfunction notifierDefaultConfigFactory() {\n    return new NotifierConfig({});\n}\n/**\n * Notifier module\n */\nclass NotifierModule {\n    /**\n     * Setup the notifier module with custom providers, in this case with a custom configuration based on the givne options\n     *\n     * @param {?=} options\n     * @return {?} - Notifier module with custom providers\n     */\n    static withConfig(options = {}) {\n        return {\n            ngModule: NotifierModule,\n            providers: [\n                // Provide the options itself upfront (as we need to inject them as dependencies -- see below)\n                {\n                    provide: NotifierOptionsToken,\n                    useValue: options\n                },\n                // Provide a custom notifier configuration, based on the given notifier options\n                {\n                    deps: [\n                        NotifierOptionsToken\n                    ],\n                    provide: NotifierConfigToken,\n                    useFactory: notifierCustomConfigFactory\n                }\n            ]\n        };\n    }\n}\nNotifierModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NotifierModule });\nNotifierModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NotifierModule_Factory(t) { return new (t || NotifierModule)(); }, providers: [\n        NotifierAnimationService,\n        NotifierService,\n        NotifierQueueService,\n        // Provide the default notifier configuration if just the module is imported\n        {\n            provide: NotifierConfigToken,\n            useFactory: notifierDefaultConfigFactory\n        }\n    ], imports: [[\n            CommonModule\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NotifierModule, { declarations: function () { return [NotifierContainerComponent,\n        NotifierNotificationComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [NotifierContainerComponent]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NotifierModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    NotifierContainerComponent,\n                    NotifierNotificationComponent\n                ],\n                exports: [\n                    NotifierContainerComponent\n                ],\n                imports: [\n                    CommonModule\n                ],\n                providers: [\n                    NotifierAnimationService,\n                    NotifierService,\n                    NotifierQueueService,\n                    // Provide the default notifier configuration if just the module is imported\n                    {\n                        provide: NotifierConfigToken,\n                        useFactory: notifierDefaultConfigFactory\n                    }\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { NotifierConfig, NotifierConfigToken, NotifierContainerComponent, NotifierModule, NotifierNotificationComponent, NotifierOptionsToken, NotifierService, notifierCustomConfigFactory, notifierDefaultConfigFactory, NotifierQueueService as ɵa, NotifierTimerService as ɵb, NotifierAnimationService as ɵc };\n\n//# sourceMappingURL=angular-notifier.js.map"]}